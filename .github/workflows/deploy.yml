name: Deploy to VM

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        shell: pwsh
        run: npm install

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      - name: Add host to known hosts
        shell: pwsh
        run: |
          # Add host to known_hosts
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VM with zero downtime
        shell: pwsh
        run: |
          # Define deployment directories
          $BLUE_DIR="/home/azureuser/app-blue"
          $GREEN_DIR="/home/azureuser/app-green"
          $CURRENT_LINK="/home/azureuser/app-current"
          $NEXT_LINK="/home/azureuser/app-next"
          
          # Determine which environment is currently active and which will be the next
          $checkCurrentEnv = "if [ -L $CURRENT_LINK ] && [ \$(readlink -f $CURRENT_LINK) == '$BLUE_DIR' ]; then echo 'blue'; else echo 'green'; fi"
          $currentEnv = ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} $checkCurrentEnv
          $nextEnv = if ($currentEnv -eq "blue") { "green" } else { "blue" }
          $nextDir = if ($nextEnv -eq "blue") { $BLUE_DIR } else { $GREEN_DIR }
          
          Write-Host "Current environment: $currentEnv"
          Write-Host "Next environment: $nextEnv"
          Write-Host "Next directory: $nextDir"
          
          # Prepare the next environment
          $prepareCommand = @"
            # Create directories if they don't exist
            mkdir -p $BLUE_DIR $GREEN_DIR
            
            # Prepare the next environment
            rm -rf $nextDir/*
            mkdir -p $nextDir
            
            # Create the next symlink if it doesn't exist
            if [ ! -L $NEXT_LINK ]; then
              ln -s $nextDir $NEXT_LINK
            else
              rm $NEXT_LINK
              ln -s $nextDir $NEXT_LINK
            fi
"@
          
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "$prepareCommand"
          
          # Copy files to the next environment
          scp -r ./* ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:$nextDir/
          
          # Deploy and start the application in the next environment
          $deployCommand = @"
            cd $nextDir
            
            # Install dependencies
            npm install
            
            # Start the application on a different port (8080 for blue, 8081 for green)
            PORT=$(if [ '$nextEnv' = 'blue' ]; then echo 8080; else echo 8081; fi)
            
            # Update the port in the application
            sed -i "s/const PORT = .*/const PORT = $PORT;/" src/index.js
            
            # Start the application
            nohup node src/index.js > app.log 2>&1 &
            
            # Wait for the application to start
            sleep 5
            
            # Check if the application is responding
            curl -s http://localhost:$PORT/sayHello
            
            # If successful, update the nginx configuration to route traffic to the new instance
            if [ $? -eq 0 ]; then
              # Update nginx config to point to the new port
              cat > /etc/nginx/conf.d/app.conf << EOF
              server {
                listen 80;
                server_name _;
                
                location / {
                  proxy_pass http://localhost:$PORT;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
                }
              }
              EOF
              
              # Reload nginx to apply changes
              sudo systemctl reload nginx
              
              # Update the current symlink to point to the new environment
              rm -f $CURRENT_LINK
              ln -s $nextDir $CURRENT_LINK
              
              echo "Deployment successful! Switched to $nextEnv environment."
            else
              echo "Deployment failed! The application is not responding."
              exit 1
            fi
"@
          
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "$deployCommand"
          
          # Cleanup: Stop the old instance after successful deployment
          $cleanupCommand = @"
            # Get the old port
            OLD_PORT=$(if [ '$nextEnv' = 'blue' ]; then echo 8081; else echo 8080; fi)
            
            # Find and stop the old process
            OLD_PID=$(lsof -t -i:$OLD_PORT)
            if [ ! -z "$OLD_PID" ]; then
              echo "Stopping old process with PID $OLD_PID"
              kill -15 $OLD_PID
            fi
"@
          
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "$cleanupCommand"